{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Example linear regression (2nd-order polynomial)\n",
    "*************************\n",
    "\n",
    "This is a toy problem meant to demonstrate how one would use the ML Uncertainty toolbox. The problem being solved is a linear regression problem and has an uncertainty that can already be calculated analytically.\n",
    "\n",
    "Imports\n",
    "======="
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:46.903894Z",
     "start_time": "2019-05-28T18:06:46.272768Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import scipy as sp\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import sklearn.linear_model as sklm\n",
    "import sklearn.model_selection as skcv\n",
    "import ml_uncertainty as plu"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Data and Metadata\n",
    "=================\n",
    "\n",
    "Data for the toy problem\n",
    "------------------------\n",
    "\n",
    "Here's some X data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:46.917851Z",
     "start_time": "2019-05-28T18:06:46.906353Z"
    }
   },
   "outputs": [],
   "source": [
    "xdata = np.array([[4.00],\n",
    "[4.20],\n",
    "[4.30],\n",
    "[4.47],\n",
    "[4.58],\n",
    "[4.60],\n",
    "[4.61],\n",
    "[4.82],\n",
    "[5.05],\n",
    "[5.24],\n",
    "[5.43],\n",
    "[5.58],\n",
    "[5.82],\n",
    "[5.91],\n",
    "[5.92],\n",
    "[6.03],\n",
    "[6.32],\n",
    "[6.45],\n",
    "[6.67],\n",
    "[6.68],\n",
    "[6.91],\n",
    "[7.04],\n",
    "[7.09],\n",
    "[7.35],\n",
    "[7.49],\n",
    "[7.62],\n",
    "[7.81],\n",
    "[7.94]])\n",
    "\n",
    "#Create the linear regression X matrix\n",
    "xmatrix_first = np.ones_like(xdata) #Constant term\n",
    "xmatrix_last = xdata**2 #Square term\n",
    "#Add in the linear term\n",
    "xmatrix = np.concatenate((xmatrix_first,xdata,xmatrix_last),axis=1) "
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Here's some Y data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:47.045136Z",
     "start_time": "2019-05-28T18:06:46.919720Z"
    }
   },
   "outputs": [],
   "source": [
    "yfull = np.array([[3.70,3.53,4.12,5.03,],\n",
    "[2.96,4.69,6.44,7.36,],\n",
    "[4.69,3.68,5.86,5.70,],\n",
    "[4.28,4.22,5.32,6.33,],\n",
    "[4.86,5.27,5.61,5.57,],\n",
    "[4.77,4.61,5.38,4.91,],\n",
    "[4.74,4.45,6.34,5.71,],\n",
    "[4.76,4.40,6.51,5.62,],\n",
    "[5.01,5.52,5.85,6.92,],\n",
    "[5.59,5.81,5.86,7.98,],\n",
    "[5.17,4.67,5.58,8.38,],\n",
    "[6.02,6.04,5.70,6.87,],\n",
    "[6.68,5.94,5.78,8.10,],\n",
    "[6.91,5.97,5.68,7.80,],\n",
    "[6.14,5.74,6.30,7.65,],\n",
    "[5.67,5.78,4.97,8.98,],\n",
    "[6.89,6.41,6.40,8.08,],\n",
    "[6.57,6.46,6.44,8.43,],\n",
    "[7.34,6.31,6.14,8.55,],\n",
    "[6.62,5.98,5.78,9.17,],\n",
    "[7.22,6.59,5.99,8.95,],\n",
    "[8.05,6.85,6.78,10.92,],\n",
    "[7.11,7.29,6.19,9.74,],\n",
    "[6.43,7.40,6.45,9.39,],\n",
    "[7.02,7.14,7.34,10.13,],\n",
    "[7.27,7.37,6.12,10.04,],\n",
    "[7.29,7.07,5.65,10.91,],\n",
    "[8.29,8.39,6.57,11.78,]])\n",
    "\n",
    "ydata = yfull[:,0]\n",
    "\n",
    "#Make the data into a 2nd-order monomial with 2x the residual\n",
    "# of the linear data\n",
    "resid = ydata-np.squeeze(xdata)\n",
    "ysquared = np.squeeze(xdata**2) + 2*resid "
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Sklearn models\n",
    "--------------\n",
    "\n",
    "Make some sklearn models that we'll use for regression."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:47.134580Z",
     "start_time": "2019-05-28T18:06:47.048446Z"
    }
   },
   "outputs": [],
   "source": [
    "linear_regressor = sklm.LinearRegression\n",
    "regr = linear_regressor()\n",
    "cv = skcv.KFold(n_splits=6,shuffle=True)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Regression\n",
    "==========\n",
    "\n",
    "Recall the generic for for the linear regression problem and the way to calculate the coefficients. Here, `Y` is the array of dependent variable measurements and `X` is the array of independent variable measurements. To account for the constant term, `X` must be prepended by a column consisting of all ones."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$Y = X\\beta$$\n",
    "$$\\beta = (X^TX)^{-1}X^TY$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:47.222034Z",
     "start_time": "2019-05-28T18:06:47.137909Z"
    }
   },
   "outputs": [],
   "source": [
    "regr.fit(xmatrix[:,1:],ysquared)\n",
    "ypred = regr.predict(xmatrix[:,1:])\n",
    "y_cv = skcv.cross_val_predict(regr,xmatrix[:,1:],y=ysquared,cv=cv)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:47.521485Z",
     "start_time": "2019-05-28T18:06:47.317047Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#with plt.xkcd():\n",
    "fig,ax = plt.subplots(1,1)\n",
    "\n",
    "p1 = plt.scatter(xdata,ysquared,color='k',label='Measurement')\n",
    "p2 = plt.plot(xdata,ypred,color='r',lw=2,label='Regression')\n",
    "p3 = plt.plot(xdata,xdata**2,color='k',ls='--',label='Underlying truth')\n",
    "\n",
    "handles, labels = ax.get_legend_handles_labels()\n",
    "\n",
    "plt.legend([handles[i] for i in [2,0,1]],[labels[i] for i in [2,0,1]])\n",
    "ax.set_xlabel('The X values',size=15)\n",
    "ax.set_ylabel('The Y values',size=15)\n",
    "ax.set_xticks([])\n",
    "ax.set_yticks([])\n",
    "ax.spines['right'].set_visible(False)\n",
    "ax.spines['top'].set_visible(False)\n",
    "ax.set_ylabel\n",
    "\n",
    "t = 1"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Uncertainty Calculation\n",
    "=======================\n",
    "\n",
    "Traditional uncertainty calculation\n",
    "-----------------------------------\n",
    "\n",
    "This is the equation for the 95% confidence interval for a new prediction :math:`X_{new}` (in linear regression)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$ Y_{new} = X_{new}\\beta + \\epsilon$$\n",
    "\n",
    "$$ \\delta Y_{new} = t(0.95,n-2)\\Bigg\\{\n",
    "                          \\frac{Y^TY-\\beta^TX^TY}{n-2}\\Bigg[X_{new}(X^TX)^{-1}X_{new}^T+1\\Bigg]\n",
    "                          \\Bigg\\}^{1/2}$$"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Here, :math:`t` is the 95th percentile of the one-sided Student's T distribution with :math:`n` - 2 degrees of freedom, with :math:`n` being the number of samples in the regression (i.e. number of rows of :math:`X`). \n",
    "\n",
    "Calculate the values for the :math:`t` distribution and the SSE term."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:07:57.928389Z",
     "start_time": "2019-05-28T18:07:57.915691Z"
    }
   },
   "outputs": [],
   "source": [
    "#Create the linear regression X matrix\n",
    "#xmatrix_first = np.ones_like(xdata) #Constant term\n",
    "#xmatrix = np.concatenate((xmatrix_first,xdata),axis=1) #Add in the linear term\n",
    "\n",
    "cov = np.dot(xmatrix.T,xmatrix) #Covariance matrix\n",
    "icov = np.linalg.inv(cov) #Inverse covariance matrix\n",
    "xty = np.dot(xmatrix.T,ysquared[:,np.newaxis,]) #XTy\n",
    "\n",
    "beta = np.dot(icov,xty) #Coefficients\n",
    "\n",
    "nvars = xmatrix.shape[1]\n",
    "nsamp = xmatrix.shape[0]\n",
    "\n",
    "dof = nsamp - nvars#Degrees of freedom\n",
    "tdist = sp.stats.t(dof) #T distribution\n",
    "#T premultiplier, only one standard deviation because n is large. Squared because of how pred_unc is defined below\n",
    "tmult = tdist.ppf(0.95) ** 2 \n",
    "\n",
    "sse = (np.dot(ysquared.T,ysquared) - np.dot(ypred.T,ysquared))/(dof) #mean squared error\n",
    "\n",
    "var_premult = tmult * sse "
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Calculate the uncertainty in the predicted values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:47.850935Z",
     "start_time": "2019-05-28T18:06:47.686067Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "yl = []\n",
    "yu = []\n",
    "for row in xmatrix:\n",
    "\n",
    "    yp = np.dot(row,beta)\n",
    "    pred_unc = np.sqrt(var_premult*(np.dot(np.dot(row,icov),row.T)))\n",
    "\n",
    "    yl += [yp - 1*pred_unc]\n",
    "    yu += [yp + 1*pred_unc]\n",
    "\n",
    "    #print(pred)\n",
    "\n",
    "    #print(pred,pred_lower,pred_upper)\n",
    "lower = np.concatenate(yl)\n",
    "upper = np.concatenate(yu)\n",
    "\n",
    "yunc = np.concatenate((yl,yu),axis=1)\n",
    "\n",
    "fig,ax = plt.subplots()\n",
    "\n",
    "ax.plot(xdata,ypred,color='r',label='Regression')\n",
    "ax.plot(xdata,yunc,ls=':',color='k',label='95% confidence interval')\n",
    "ax.scatter(xdata,ysquared,color='k',label='Measurement')\n",
    "\n",
    "handles, labels = ax.get_legend_handles_labels()\n",
    "\n",
    "ax.legend([handles[i] for i in [3,0,1]],[labels[i] for i in [3,0,1]])\n",
    "\n",
    "ax.set_xlabel('The X values',size=15)\n",
    "ax.set_ylabel('The Y values',size=15)\n",
    "ax.set_xticks([])\n",
    "ax.set_yticks([])\n",
    "ax.spines['right'].set_visible(False)\n",
    "ax.spines['top'].set_visible(False)\n",
    "#plt.legend()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Bootstrap uncertainty calculation\n",
    "---------------------------------\n",
    "\n",
    "Use the residual bootstrap of `Almeida <https://doi.org/10.1016/j.microc.2012.03.006>`_ This method assumes that the residuals are representative of the uncertainty (which is really the same assumption made by linear regression uncertainty, when you think about it).\n",
    "\n",
    "Calculate the mean squared error and the cross-validation error in the regression, then calculate the pseudo-degrees of freedom and the residual weighting that will be bootstrapped. This is a large data set and cross-validation doesnt give us much more information, so the bootstrap weighting is close to 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:47.857394Z",
     "start_time": "2019-05-28T18:06:47.852982Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9406480574386638\n"
     ]
    }
   ],
   "source": [
    "residual,err,mse = plu.get_residual_stats(ysquared,ypred)\n",
    "residual_cv,err_cv,msecv = plu.get_residual_stats(ysquared,y_cv)\n",
    "\n",
    "num_train = len(xdata)\n",
    "\n",
    "pseudo_dof = num_train * (1 - np.sqrt(mse/msecv))\n",
    "bootstrap_weight = np.sqrt(1 - pseudo_dof/num_train)\n",
    "\n",
    "print(bootstrap_weight)\n",
    "\n",
    "residual_weighted = residual / bootstrap_weight"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "As an easily demonstrated example, just do bootstraps with 5 samples.\n",
    "\n",
    "First generate the bootstrap `Y` values that will be passed to the models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:47.933797Z",
     "start_time": "2019-05-28T18:06:47.859249Z"
    }
   },
   "outputs": [],
   "source": [
    "samples = 5\n",
    "\n",
    "residual_boot,boot_indices = plu.bootstrap_data(residual_weighted,samples=samples)\n",
    "residual_boot = np.squeeze(residual_boot)\n",
    "\n",
    "boot_data = (residual_boot + ypred).T #boot_data now has the new Y values with shuffled residuals"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Create some plots, generate and plot five regressions. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:48.380743Z",
     "start_time": "2019-05-28T18:06:47.937342Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7ff54fed1978>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x216 with 5 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,axes = plt.subplots(1,samples,figsize=(3*samples,3),sharey=True,\n",
    "                        gridspec_kw=dict(wspace=0),subplot_kw=dict(frameon=False))\n",
    "fig2,ax2=plt.subplots(1,1)\n",
    "\n",
    "colors = '0.6','b','r','k','c'\n",
    "ax2.plot(xdata,ypred,color='r',lw=2,zorder=100,label='Regression')\n",
    "ax2.plot(xdata,xdata**2,color='k',ls='--',lw=2,zorder=99,label='Underlying truth')\n",
    "\n",
    "ax2.set_xticks([])\n",
    "ax2.set_yticks([])\n",
    "\n",
    "ax2.set_xlabel('The X values',size=15)\n",
    "ax2.set_ylabel('The Y values',size=15)\n",
    "\n",
    "ax2.spines['right'].set_visible(False)\n",
    "ax2.spines['top'].set_visible(False)\n",
    "\n",
    "for ax in axes:\n",
    "    ax.spines['right'].set_visible(False)\n",
    "    ax.spines['left'].set_visible(False)\n",
    "    ax.spines['top'].set_visible(False)\n",
    "axes[0].spines['left'].set_visible(True)\n",
    "\n",
    "for plot_num,(color,yboot) in enumerate(zip(colors,boot_data.T)):\n",
    "    \n",
    "    yb = yboot[:,np.newaxis]\n",
    "    \n",
    "    #fig,ax = plt.subplots(1,1)\n",
    "    regr.fit(xdata,yb)\n",
    "    ypb = regr.predict(xdata)\n",
    "    \n",
    "    #print('{},{}'.format(plot_num-1,plot_num+1))\n",
    "    \n",
    "    for ax in axes[[plot_num-1,plot_num]]:\n",
    "        ax.scatter(xdata,yb,color=color)\n",
    "        ax.plot(xdata,ypb,color=color)\n",
    "        ax.set_xticks([])\n",
    "    if color=='k':\n",
    "        ax2.plot(xdata,ypb,color=color,ls=':',label='Bootstrap regression')\n",
    "    else:\n",
    "        ax2.plot(xdata,ypb,color=color,ls=':')\n",
    "\n",
    "ax = axes[0]\n",
    "ax.set_yticks([])\n",
    "ax.set_ylabel('The Y values')\n",
    "ax = axes[2]\n",
    "ax.set_xlabel('The X values')\n",
    "\n",
    "\n",
    "ax2.legend()\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Using the toolbox\n",
    "-----------------\n",
    "\n",
    "Now do the same thing with 1000 samples. This time we'll just use the :py:func:`.bootstrap` function, and we can just drop the data straight in."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:48.812862Z",
     "start_time": "2019-05-28T18:06:48.383326Z"
    }
   },
   "outputs": [],
   "source": [
    "samples = 1000\n",
    "\n",
    "linear_bootstrap = plu.bootstrap_estimator(estimator=linear_regressor,\n",
    "                                           X=xmatrix[:,1:],y=ysquared,samples=samples,cv=cv,\n",
    "                                          )\n",
    "\n",
    "linear_bootstrap.fit()\n",
    "\n",
    "ypred,cpb,bounds,error, = linear_bootstrap.bootstrap_uncertainty_bounds()\n",
    "\n",
    "#lbt_out = plu.bootstrap(xdata=xdata,ydata=np.squeeze(ydata),\n",
    "#                        PLS_model=regr,cv_object=cv,samples=samples)\n",
    "#rcv,ecv,msecv,cpb,cpt = lbt_out"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Plot the bootstrap results and show that the bootstrap uncertainty exactly reproduces the results of the linear regression uncertainty."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:51.279064Z",
     "start_time": "2019-05-28T18:06:48.814944Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig2,ax2=plt.subplots(1,1)\n",
    "\n",
    "for ypb in cpb:\n",
    "    ax2.plot(xdata,ypb,color='0.6',ls=':',zorder=0)\n",
    "\n",
    "ax2.plot(xdata,ypred,color='r',lw=3,label='Regression',zorder=3)\n",
    "ax2.plot(xdata,yunc,ls='--',color='r',lw=3,label='95% CI (regression)',zorder=3)\n",
    "ax2.plot(xdata,ypb,color='0.6',ls=':',label='Bootstrap',zorder=-1)\n",
    "\n",
    "ax2.plot(xdata,bounds.T,ls=':',color='k',lw=3,label='95% CI (boot)',zorder=4)\n",
    "\n",
    "ax2.scatter(xdata,ysquared,color='k',label='Measurement',zorder=5)\n",
    "\n",
    "ax2.set_xlabel('The X values',size=15)\n",
    "ax2.set_ylabel('The Y values',size=15)\n",
    "\n",
    "ax2.set_xticks([])\n",
    "ax2.set_yticks([])\n",
    "\n",
    "\n",
    "ax2.spines['right'].set_visible(False)\n",
    "ax2.spines['top'].set_visible(False)\n",
    "\n",
    "#ax2.legend()\n",
    "\n",
    "handles, labels = ax2.get_legend_handles_labels()\n",
    "\n",
    "ax2.legend([handles[i] for i in [0,3,1,4,6]],[labels[i] for i in [0,3,1,4,6]])\n",
    "\n",
    "t = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:51.284737Z",
     "start_time": "2019-05-28T18:06:51.280744Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.09483087, -0.10595275],\n",
       "       [ 0.10746581, -0.10633848],\n",
       "       [ 0.10166273, -0.12672244],\n",
       "       [ 0.08929502, -0.11990567],\n",
       "       [ 0.12438105, -0.09780311],\n",
       "       [ 0.1261887 , -0.09332473],\n",
       "       [ 0.12626065, -0.0912731 ],\n",
       "       [ 0.10391902, -0.10553357],\n",
       "       [ 0.12381275, -0.14610142],\n",
       "       [ 0.1451628 , -0.12070537],\n",
       "       [ 0.16982132, -0.10073642],\n",
       "       [ 0.18724042, -0.07826695],\n",
       "       [ 0.19304763, -0.10100713],\n",
       "       [ 0.16893004, -0.07911934],\n",
       "       [ 0.16634934, -0.07878156],\n",
       "       [ 0.14194964, -0.07905529],\n",
       "       [ 0.16571014, -0.10854832],\n",
       "       [ 0.16550811, -0.10531119],\n",
       "       [ 0.15156991, -0.12251177],\n",
       "       [ 0.14921162, -0.12882945],\n",
       "       [ 0.16454438, -0.18028952],\n",
       "       [ 0.16855882, -0.1692009 ],\n",
       "       [ 0.15441342, -0.17368161],\n",
       "       [ 0.13762857, -0.14694859],\n",
       "       [ 0.12559564, -0.1587315 ],\n",
       "       [ 0.10218068, -0.17468748],\n",
       "       [ 0.11006489, -0.17726765],\n",
       "       [ 0.11500796, -0.18186523]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(yunc - bounds.T)/error.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:51.442596Z",
     "start_time": "2019-05-28T18:06:51.286159Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[14.27109377, 15.97394449],\n",
       "       [16.37680081, 17.76217485],\n",
       "       [17.43537962, 18.686175  ],\n",
       "       [19.24163371, 20.30478879],\n",
       "       [20.41382092, 21.38525244],\n",
       "       [20.62718987, 21.58454258],\n",
       "       [20.73390178, 21.68451633],\n",
       "       [22.97968771, 23.83396889],\n",
       "       [25.45728854, 26.29032594],\n",
       "       [27.53107877, 28.38713721],\n",
       "       [29.64108567, 30.5334338 ],\n",
       "       [31.33772939, 32.25756711],\n",
       "       [34.11528272, 35.06436097],\n",
       "       [35.17772189, 36.13130615],\n",
       "       [35.29648349, 36.25032982],\n",
       "       [36.61228694, 37.56583283],\n",
       "       [40.16305744, 41.08983596],\n",
       "       [41.79175482, 42.69739948],\n",
       "       [44.59475653, 45.46254661],\n",
       "       [44.72342105, 45.58970988],\n",
       "       [47.70695501, 48.55573803],\n",
       "       [49.40911429, 50.27192671],\n",
       "       [50.06582826, 50.94064503],\n",
       "       [53.49222197, 54.50217208],\n",
       "       [55.34336183, 56.48023124],\n",
       "       [57.06665282, 58.35428906],\n",
       "       [59.59531748, 61.15545813],\n",
       "       [61.33396394, 63.11291955]])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yunc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:51.512122Z",
     "start_time": "2019-05-28T18:06:51.445304Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[14.18157366, 16.07448446],\n",
       "       [16.29375706, 17.84495417],\n",
       "       [17.36485319, 18.77724574],\n",
       "       [19.18972835, 20.37751209],\n",
       "       [20.345278  , 21.43825215],\n",
       "       [20.55910007, 21.63455203],\n",
       "       [20.66618914, 21.73293219],\n",
       "       [22.930696  , 23.88491853],\n",
       "       [25.39865577, 26.36186427],\n",
       "       [27.45871042, 28.44615106],\n",
       "       [29.54993178, 30.5834779 ],\n",
       "       [31.23250963, 32.29689087],\n",
       "       [34.00278657, 35.11816107],\n",
       "       [35.08238569, 36.17293874],\n",
       "       [35.20275709, 36.29173306],\n",
       "       [36.53421263, 37.60717462],\n",
       "       [40.07044362, 41.14590933],\n",
       "       [41.70143859, 42.75039947],\n",
       "       [44.51842314, 45.52404836],\n",
       "       [44.64837753, 45.65454068],\n",
       "       [47.62405831, 48.64984816],\n",
       "       [49.32231381, 50.36044898],\n",
       "       [49.98640955, 51.03310856],\n",
       "       [53.41225758, 54.58983612],\n",
       "       [55.26336696, 56.58965504],\n",
       "       [56.99503156, 58.49363263],\n",
       "       [59.50055003, 61.32651216],\n",
       "       [61.2181546 , 63.31027015]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bounds.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:51.589825Z",
     "start_time": "2019-05-28T18:06:51.515055Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.94399751, 0.94891328],\n",
       "       [0.77274589, 0.77845123],\n",
       "       [0.69372945, 0.7186631 ],\n",
       "       [0.58127947, 0.60650427],\n",
       "       [0.551072  , 0.54190215],\n",
       "       [0.53958709, 0.53586486],\n",
       "       [0.53629251, 0.53045055],\n",
       "       [0.47144125, 0.48278128],\n",
       "       [0.47356007, 0.48964844],\n",
       "       [0.49853236, 0.48890829],\n",
       "       [0.53676354, 0.49678258],\n",
       "       [0.56195001, 0.50243122],\n",
       "       [0.58273782, 0.53263669],\n",
       "       [0.56435315, 0.52619991],\n",
       "       [0.56343114, 0.52554483],\n",
       "       [0.55001416, 0.52294783],\n",
       "       [0.55889049, 0.51657522],\n",
       "       [0.54569065, 0.50327023],\n",
       "       [0.50361838, 0.50200684],\n",
       "       [0.50293351, 0.50322964],\n",
       "       [0.50379542, 0.52199443],\n",
       "       [0.51495664, 0.52317854],\n",
       "       [0.51432522, 0.53237379],\n",
       "       [0.58101593, 0.59656261],\n",
       "       [0.63692399, 0.6893641 ],\n",
       "       [0.70092757, 0.7976735 ],\n",
       "       [0.86101429, 0.96494784],\n",
       "       [1.00696801, 1.08514754]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "error.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:51.671036Z",
     "start_time": "2019-05-28T18:06:51.592999Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000, 28)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "linear_bootstrap.boot_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:51.756072Z",
     "start_time": "2019-05-28T18:06:51.674351Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.98414377, 0.9800988 , 0.96281945, 0.97785665, 0.99255599,\n",
       "       0.96224198, 0.97777613, 0.9784806 , 0.97131318, 0.99204086,\n",
       "       0.99410038, 0.95844077, 0.99162786, 0.95797863, 0.97178914,\n",
       "       0.95407061, 0.97049178, 0.97078983, 0.99070464, 0.96782657,\n",
       "       0.98975311, 0.96187947, 0.96709553, 0.94918955, 0.96550174,\n",
       "       1.00714298, 1.00930739, 1.0094565 ])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "linear_bootstrap.boot_data.std(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:51.815366Z",
     "start_time": "2019-05-28T18:06:51.759429Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(28,)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "linear_bootstrap.base_predict(xmatrix[:,1:]).shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-28T18:06:54.947406Z",
     "start_time": "2019-05-28T18:06:51.818745Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ymodel = linear_bootstrap.base_predict(xmatrix[:,1:])\n",
    "for row in linear_bootstrap.boot_data:\n",
    "    plt.scatter(xdata,row+ymodel,s=1,color='k')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python [conda env:py3]",
   "language": "python",
   "name": "conda-env-py3-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": "block",
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
